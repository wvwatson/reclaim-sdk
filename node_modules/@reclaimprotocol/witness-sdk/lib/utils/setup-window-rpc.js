"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupWindowRpc = void 0;
const api_client_1 = require("../api-client");
const logger_1 = require("./logger");
/**
 * Sets up the current window to listen for RPC requests
 * from React Native or other windows
 */
function setupWindowRpc() {
    window.addEventListener('message', handleMessage, false);
    logger_1.logger.info('window RPC setup');
    async function handleMessage(event) {
        let id = '';
        let channel = '';
        try {
            if (!event.data) {
                return;
            }
            const req = typeof event.data === 'string'
                ? JSON.parse(event.data)
                : event.data;
            // ignore any messages not for us
            if (req.module !== 'witness-sdk') {
                return;
            }
            // ignore response messages
            if ('isResponse' in req && req.isResponse) {
                return;
            }
            if (!req.id) {
                logger_1.logger.warn({ req }, 'Window RPC request missing ID');
                return;
            }
            logger_1.logger.info({ req, origin: event.origin }, 'processing RPC request');
            id = req.id;
            channel = req.channel || '';
            switch (req.type) {
                case 'createClaim':
                    const response = await (0, api_client_1.createClaim)({
                        ...req.request,
                        didUpdateCreateStep(step) {
                            respond({
                                type: 'createClaimStep',
                                step,
                            });
                        },
                    });
                    respond({
                        type: 'createClaimDone',
                        response,
                    });
                    break;
                default:
                    throw new Error(`Unknown request type: ${req.type}`);
            }
        }
        catch (err) {
            logger_1.logger.error({ err, data: event.data }, 'error in RPC');
            respond({
                type: 'error',
                data: {
                    message: err.message,
                    stack: err.stack,
                }
            });
        }
        function respond(data) {
            var _a;
            const res = {
                ...data,
                id,
                module: 'witness-sdk',
                isResponse: true
            };
            const resStr = JSON.stringify(res);
            if (channel) {
                (_a = window[channel]) === null || _a === void 0 ? void 0 : _a.postMessage(resStr);
            }
            else {
                event.source.postMessage(resStr);
            }
        }
    }
}
exports.setupWindowRpc = setupWindowRpc;
