"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeAPITLSClient = void 0;
const common_grpc_web_transport_1 = require("@reclaimprotocol/common-grpc-web-transport");
const tls_1 = require("@reclaimprotocol/tls");
const api_1 = require("../proto/api");
const utils_1 = require("../utils");
const EMPTY_UINT8ARRAY = new Uint8Array(0);
// we only support chacha20-poly1305 for API sessions
// that need ZK proofs
const ZK_CIPHER_SUITES = ['TLS_CHACHA20_POLY1305_SHA256'];
// map the TLS cipher suites to the API cipher suites
const CIPHER_SUITE_MAP = {
    'TLS_CHACHA20_POLY1305_SHA256': api_1.TlsCipherSuiteType.TLS_CIPHER_SUITE_TYPE_CHACHA20_POLY1305_SHA256,
    'TLS_AES_256_GCM_SHA384': api_1.TlsCipherSuiteType.TLS_CIPHER_SUITE_TYPE_AES_256_GCM_SHA384,
    'TLS_AES_128_GCM_SHA256': api_1.TlsCipherSuiteType.TLS_CIPHER_SUITE_TYPE_AES_128_GCM_SHA256,
};
const NAMED_CURVE_LIST = (0, common_grpc_web_transport_1.detectEnvironment)() === 'node'
    ? tls_1.SUPPORTED_NAMED_CURVES
    // X25519 is not supported in the browser
    : tls_1.SUPPORTED_NAMED_CURVES.filter(c => c !== 'X25519');
const makeAPITLSClient = ({ host, port, client, redactResponse, handleDataFromServer, onTlsEnd, request, logger: _logger, additionalConnectOpts, zkOperator, zkProofConcurrency }) => {
    let sessionId;
    let abort;
    let pendingReveal = false;
    let psk;
    const logger = _logger || (utils_1.logger === null || utils_1.logger === void 0 ? void 0 : utils_1.logger.child({}));
    const enableResponseRedaction = !!redactResponse;
    const { generateOutOfBandSession } = additionalConnectOpts || {};
    const blocksToReveal = [];
    const allServerBlocks = [];
    const cipherSuites = enableResponseRedaction ? ZK_CIPHER_SUITES : undefined;
    if (!enableResponseRedaction) {
        logger.info('disabled ZK proofs');
    }
    let onHandshake;
    const tls = (0, tls_1.makeTLSClient)({
        host,
        logger,
        cipherSuites,
        namedCurves: NAMED_CURVE_LIST,
        ...additionalConnectOpts || {},
        onHandshake() {
            onHandshake === null || onHandshake === void 0 ? void 0 : onHandshake();
        },
        async onRecvData(plaintext, { authTag, ciphertext }) {
            await handleDataFromServer(plaintext);
            const keys = tls.getKeys();
            const key = await tls_1.crypto.exportKey(keys.serverEncKey);
            const iv = (0, tls_1.generateIV)(keys.serverIv, keys.recordRecvCount - 1);
            allServerBlocks.push({
                authTag,
                directReveal: { key, iv },
                plaintext,
                ciphertext,
            });
        },
        onTlsEnd,
        async write({ header, content, authTag }) {
            if (!sessionId) {
                throw new Error('Too early to write');
            }
            if (pendingReveal && (authTag === null || authTag === void 0 ? void 0 : authTag.length)) {
                const keys = tls.getKeys();
                const key = await tls_1.crypto.exportKey(keys.clientEncKey);
                const iv = (0, tls_1.generateIV)(keys.clientIv, keys.recordSendCount - 1);
                blocksToReveal.push({
                    authTag,
                    directReveal: { key, iv }
                });
                pendingReveal = false;
            }
            const req = {
                sessionId,
                messages: [
                    {
                        recordHeader: header,
                        content,
                        authenticationTag: authTag || EMPTY_UINT8ARRAY
                    }
                ]
            };
            await client.pushToSession(req);
            logger.debug({ sessionId, length: content.length }, 'pushed data');
        }
    });
    return {
        generatePSK,
        async connect() {
            if (!psk && generateOutOfBandSession) {
                await generatePSK();
            }
            let initialiseSessionParams = request;
            if (!(initialiseSessionParams === null || initialiseSessionParams === void 0 ? void 0 : initialiseSessionParams.beaconBasedProviderClaimRequest)
                && !(initialiseSessionParams === null || initialiseSessionParams === void 0 ? void 0 : initialiseSessionParams.receiptGenerationRequest)) {
                initialiseSessionParams = {
                    receiptGenerationRequest: {
                        host,
                        port
                    },
                    beaconBasedProviderClaimRequest: undefined
                };
            }
            logger.trace('initialising...');
            const res = await client.initialiseSession(initialiseSessionParams);
            sessionId = res.sessionId;
            abort = new AbortController();
            logger.debug({ sessionId }, 'initialised session');
            const pullResult = await client.pullFromSession({
                sessionId,
                version: api_1.WitnessVersion.WITNESS_VERSION_1_0_0
            }, { signal: abort === null || abort === void 0 ? void 0 : abort.signal });
            logger.debug('pulling from session');
            const evPromise = listenToDataFromServer(pullResult, () => {
                logger.debug('session ready');
                tls.startHandshake({ psk });
            });
            await Promise.race([
                evPromise,
                new Promise(resolve => {
                    onHandshake = resolve;
                })
            ]);
            if (!tls.isHandshakeDone()) {
                throw new Error('Handshake failed');
            }
            logger.debug({ meta: tls.getMetadata() }, 'handshake done');
            return () => {
                abort === null || abort === void 0 ? void 0 : abort.abort();
            };
        },
        async cancel() {
            if (!sessionId) {
                throw new Error('Nothing to cancel');
            }
            abort === null || abort === void 0 ? void 0 : abort.abort();
            await client.cancelSession({ sessionId });
            await tls.end();
        },
        async finish() {
            if (!sessionId) {
                throw new Error('Nothing to cancel');
            }
            if (redactResponse && enableResponseRedaction) {
                const zkBlocks = await (0, utils_1.prepareZkProofs)({
                    blocks: allServerBlocks,
                    redact: redactResponse,
                    logger,
                    zkOperator,
                    zkProofConcurrency,
                });
                // if all blocks should be revealed, reveal them all
                if (zkBlocks === 'all') {
                    blocksToReveal.push(...allServerBlocks);
                }
                else {
                    for (const { block } of zkBlocks) {
                        blocksToReveal.push(block);
                    }
                }
            }
            else {
                blocksToReveal.push(...allServerBlocks);
            }
            abort === null || abort === void 0 ? void 0 : abort.abort();
            const cipherSuite = tls.getMetadata().cipherSuite;
            const result = await client.finaliseSession({
                sessionId,
                revealBlocks: blocksToReveal,
                cipherSuite: CIPHER_SUITE_MAP[cipherSuite]
            });
            tls.end();
            return result;
        },
        async write(data, redactedSections) {
            var _a;
            let currentIndex = 0;
            for (let i = 0; i < redactedSections.length; i++) {
                const section = redactedSections[i];
                const block = data.slice(currentIndex, section.fromIndex);
                if (block.length) {
                    await writeWithReveal(block, true);
                }
                const redacted = data.slice(section.fromIndex, section.toIndex);
                await writeWithReveal(redacted, false);
                currentIndex = section.toIndex;
            }
            // write if redactions were there
            const lastBlockStart = ((_a = redactedSections === null || redactedSections === void 0 ? void 0 : redactedSections[redactedSections.length - 1]) === null || _a === void 0 ? void 0 : _a.toIndex) || 0;
            const block = data.slice(lastBlockStart);
            if (block.length) {
                await writeWithReveal(block, true);
            }
        }
    };
    async function listenToDataFromServer(result, onReady) {
        var _a;
        try {
            for await (const { message } of result) {
                // empty record header means the session is ready
                if (!((_a = message === null || message === void 0 ? void 0 : message.recordHeader) === null || _a === void 0 ? void 0 : _a.length)) {
                    onReady();
                    continue;
                }
                const type = message.recordHeader[0];
                tls.handleReceivedPacket(type, {
                    header: message.recordHeader,
                    content: message.content,
                    authTag: message.authenticationTag,
                });
            }
        }
        catch (error) {
            if (!error.message.includes('aborted')) {
                throw error;
            }
        }
    }
    async function writeWithReveal(data, reveal) {
        if (!reveal) {
            await tls.updateTrafficKeys();
        }
        if (reveal) {
            pendingReveal = true;
        }
        await tls.write(data);
        if (!reveal) {
            await tls.updateTrafficKeys();
        }
    }
    async function generatePSK() {
        const { Socket } = await Promise.resolve().then(() => __importStar(require('net')));
        const socket = new Socket();
        let onTicket;
        const tls = (0, tls_1.makeTLSClient)({
            host,
            logger,
            cipherSuites,
            ...additionalConnectOpts || {},
            async write({ header, content, authTag }) {
                socket.write(header);
                socket.write(content);
                if (authTag) {
                    socket.write(authTag);
                }
            },
            onSessionTicket(ticket) {
                onTicket === null || onTicket === void 0 ? void 0 : onTicket(ticket);
            },
        });
        socket.once('connect', () => tls.startHandshake());
        socket.on('data', tls.handleReceivedBytes);
        socket.connect({ host, port });
        const ticket = new Promise(resolve => {
            onTicket = resolve;
        });
        logger.info('waiting for TLS ticket');
        psk = await tls.getPskFromTicket(await ticket);
        logger.info('got TLS ticket, ending session...');
        socket.end();
        tls.end();
    }
};
exports.makeAPITLSClient = makeAPITLSClient;
