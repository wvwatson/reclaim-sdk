import type { TLSConnectionOptions } from '@reclaimprotocol/tls';
import { ProviderClaimData } from '../proto/api';
import { ProviderName, ProviderParams, ProviderSecretParams } from '../providers';
import { Beacon, CreateStep, Logger } from '../types';
import { createGrpcWebClient, PrepareZKProofsBaseOpts } from '../utils';
export type CreateClaimOptions<N extends ProviderName> = {
    /** name of the provider to generate signed receipt for */
    name: N;
    /**
     * parameters to verify the provider receipt with
     */
    params: ProviderParams<N>;
    /** additional data for signing */
    context?: string;
    /**
     * secrets that are used to make the API request;
     * not included in the receipt & cannot be viewed by anyone
     * outside this client
     */
    secretParams: ProviderSecretParams<N>;
    /**
     * private key of the owner of the claim.
     * Used to sign the claim request
    */
    ownerPrivateKey: string;
    /** Pass to resume from a specific step */
    resumeFromStep?: CreateStep;
    /** listen for when a certain step is reached */
    didUpdateCreateStep?: (step: CreateStep) => void;
    additionalConnectOpts?: TLSConnectionOptions;
    makeGrpcClient?: typeof createGrpcWebClient;
    logger?: Logger;
    beacon?: Beacon;
} & PrepareZKProofsBaseOpts;
/**
 * Create a claim on chain
 * @param param0 parameters to create the claim with
 */
export declare function createClaim<Name extends ProviderName>({ name, params, secretParams, resumeFromStep, additionalConnectOpts, zkOperator, ownerPrivateKey, didUpdateCreateStep, context, beacon, logger, makeGrpcClient, zkProofConcurrency }: CreateClaimOptions<Name>): Promise<{
    identifier: string;
    claimData: ProviderClaimData;
    signatures: string[];
    witnessHosts: string[];
}>;
