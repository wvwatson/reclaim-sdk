import { TLSConnectionOptions } from '@reclaimprotocol/tls';
import { InitialiseSessionRequest, ReclaimWitnessClient } from '../proto/api';
import { ArraySlice, Logger } from '../types';
import { PrepareZKProofsBaseOpts } from '../utils';
export type APITLSClientOptions = {
    host: string;
    port: number;
    client: ReclaimWitnessClient;
    handleDataFromServer(data: Uint8Array): void;
    onTlsEnd?(error?: Error): void;
    /** return the sections of the response to redact */
    redactResponse?(data: Uint8Array): ArraySlice[];
    request?: Partial<InitialiseSessionRequest>;
    logger?: Logger;
    additionalConnectOpts?: TLSConnectionOptions;
} & PrepareZKProofsBaseOpts;
export declare const makeAPITLSClient: ({ host, port, client, redactResponse, handleDataFromServer, onTlsEnd, request, logger: _logger, additionalConnectOpts, zkOperator, zkProofConcurrency }: APITLSClientOptions) => {
    generatePSK: () => Promise<void>;
    connect(): Promise<() => void>;
    cancel(): Promise<void>;
    finish(): Promise<import("../proto/api").FinaliseSessionResponse>;
    write(data: Uint8Array, redactedSections: ArraySlice[]): Promise<void>;
};
