import { TLSConnectionOptions } from '@reclaimprotocol/tls';
import { InitialiseSessionRequest, ReclaimWitnessClient } from '../proto/api';
import { ProviderName, ProviderParams, ProviderSecretParams } from '../providers';
import { Logger } from '../types';
import { PrepareZKProofsBaseOpts } from '../utils';
export type GenerateProviderReceiptOptions<N extends ProviderName> = {
    /** name of the provider to generate signed receipt for */
    name: N;
    /**
     * secrets that are used to make the API request;
     * not included in the receipt & cannot be viewed by anyone
     * outside this client
     */
    secretParams: ProviderSecretParams<N>;
    params: ProviderParams<N>;
    requestData?: Partial<InitialiseSessionRequest>;
    client: ReclaimWitnessClient;
    additionalConnectOpts?: TLSConnectionOptions;
    logger?: Logger;
} & PrepareZKProofsBaseOpts;
export declare function generateProviderReceipt<Name extends ProviderName>({ name, secretParams, params, client, requestData, additionalConnectOpts, logger, zkOperator, zkProofConcurrency }: GenerateProviderReceiptOptions<Name>): Promise<import("../proto/api").FinaliseSessionResponse>;
