"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const dotenv_1 = require("dotenv");
(0, dotenv_1.config)();
const promises_1 = require("fs/promises");
const __1 = require("..");
const DEFAULT_WITNESS_HOST_PORT = 'https://reclaim-node.questbook.app';
async function main(receiptParams) {
    const paramsJson = receiptParams !== null && receiptParams !== void 0 ? receiptParams : (await getInputParameters());
    if (!(paramsJson.name in __1.providers)) {
        throw new Error(`Unknown provider "${paramsJson.name}"`);
    }
    if (!__1.providers[paramsJson.name].areValidParams(paramsJson.params)) {
        throw new Error(`Invalid parameters for provider "${paramsJson.name}"`);
    }
    const witnessHostPort = getCliArgument('witness')
        || DEFAULT_WITNESS_HOST_PORT;
    const client = await (0, __1.createGrpcWebClient)(witnessHostPort, __1.logger);
    const { receipt } = await (0, __1.generateProviderReceipt)({
        name: paramsJson.name,
        secretParams: paramsJson.secretParams,
        params: paramsJson.params,
        client,
        logger: __1.logger,
    });
    const transcriptStr = (0, __1.getTranscriptString)(receipt.transcript);
    console.log('receipt:\n', transcriptStr);
    try {
        await __1.providers[paramsJson.name].assertValidProviderReceipt(receipt, paramsJson.params);
        console.log(`receipt is valid for ${paramsJson.name} provider`);
    }
    catch (err) {
        console.error(`receipt is invalid for ${paramsJson.name} provider:`, err);
    }
}
exports.main = main;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function getInputParameters() {
    const paramsJsonFile = getCliArgument('json');
    if (!paramsJsonFile) {
        const name = getCliArgument('name');
        const paramsStr = getCliArgument('params');
        const secretParamsStr = getCliArgument('secretParams');
        if (!name || !paramsStr || !secretParamsStr) {
            throw new Error('Either provide --json argument for parameters JSON or provide separately with --name, --params & --secretParams');
        }
        return {
            name,
            params: JSON.parse(paramsStr),
            secretParams: JSON.parse(secretParamsStr)
        };
    }
    let fileContents = await (0, promises_1.readFile)(paramsJsonFile, 'utf8');
    for (const variable in process.env) {
        fileContents = fileContents.replace(`{{${variable}}}`, process.env[variable]);
    }
    return JSON.parse(fileContents);
}
function getCliArgument(arg) {
    const index = process.argv.indexOf(`--${arg}`);
    if (index === -1) {
        return undefined;
    }
    return process.argv[index + 1];
}
if (require.main === module) {
    main()
        .catch(err => {
        console.error('error in receipt gen', err);
    });
}
