"use strict";
/**
 * For Swiggy Equal users to prove their usership on swiggy
 *
 * https://www.swiggy.com/
 *
*/
Object.defineProperty(exports, "__esModule", { value: true });
const zlib_1 = require("zlib");
const config_1 = require("../config");
const http_parser_1 = require("../utils/http-parser");
const HOST = 'www.swiggy.com';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
const METHOD = 'GET';
const URL = '/dapi/order/all?order_id=';
const swiggyUser = { hostPort: HOSTPORT, areValidParams(params) {
        return typeof params.userData === 'string';
    },
    createRequest({ cookieStr }) {
        const data = [
            'GET /dapi/order/all?order_id= HTTP/1.1',
            'Host: www.swiggy.com',
            'Connection: close',
            'cookie:' + cookieStr,
            'user-agent: reclaim/0.0.1',
            'Accept-Encoding: gzip, deflate',
            '\r\n',
        ].join('\r\n');
        const cookieStartIndex = data.indexOf(cookieStr);
        return {
            data,
            redactions: [
                {
                    fromIndex: cookieStartIndex,
                    toIndex: cookieStartIndex + cookieStr.length,
                },
            ],
        };
    },
    assertValidProviderReceipt(receipt, { userData }) {
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== METHOD.toLowerCase()) {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith(URL)) {
            throw new Error(`Invalid URL: ${req.url}`);
        }
        if (req.headers['connection'] !== 'close') {
            throw new Error('Invalid connection header');
        }
        // Parse the HTTP response
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (res.statusCode !== 200) {
            throw new Error(`Invalid status code: ${res.statusCode}`);
        }
        let html;
        if (res.headers['content-encoding'] === 'gzip') {
            html = (0, zlib_1.gunzipSync)(res.body).toString();
        }
        else {
            html = res.body.toString();
        }
        const data = JSON.parse(html);
        delete data.csrfToken;
        // Check if the following account is in the response
        if (JSON.stringify(data) !== userData) {
            throw new Error('User data did not match at witness');
        }
    },
};
exports.default = swiggyUser;
