"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Verify the total no of Hackathons Participated
 * https://api.devfolio.co/api/users/${username}/primary_stats
 *
 */
const config_1 = require("../../config");
const utils_1 = require("../../utils");
const http_parser_1 = require("../../utils/http-parser");
// where to send the HTTP request
const HOST = 'api.devfolio.co';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
const DevfolioHackathonsCount = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return (typeof params.username === 'string' &&
            params.username !== '' &&
            typeof params.hackathonCount === 'number');
    },
    createRequest({ cookieStr }, { username }) {
        const data = [
            `GET /api/users/${username}/primary_stats HTTP/1.1`,
            'Host: ' + HOST,
            'Connection: close',
            'cookie: ' + cookieStr,
            'User-Agent: reclaim/1.0.0',
            'Accept-Encoding: gzip, deflate',
            '\r\n',
        ].join('\r\n');
        const tokenStartIndex = data.indexOf(cookieStr);
        return {
            data,
            redactions: [
                {
                    fromIndex: tokenStartIndex,
                    toIndex: tokenStartIndex + cookieStr.length,
                },
            ],
        };
    },
    assertValidProviderReceipt(receipt, { hackathonCount }) {
        var _a, _b;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== 'get') {
            throw new Error(`Invalid method: ${req.method}`);
        }
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (!((_a = res.headers['content-type']) === null || _a === void 0 ? void 0 : _a.startsWith('application/json'))) {
            throw new Error(`Invalid content-type: ${res.headers['content-type']}`);
        }
        let html;
        if (res.headers['content-encoding'] === 'gzip') {
            const buf = Buffer.from(res.body);
            html = (0, utils_1.gunzipSync)(buf).toString();
        }
        else {
            html = res.body.toString();
        }
        const data = JSON.parse(html);
        const resHackathonCount = (_b = data === null || data === void 0 ? void 0 : data.hackathons) !== null && _b !== void 0 ? _b : 0;
        if (resHackathonCount !== hackathonCount) {
            throw new Error('Values doesnt match');
        }
    },
};
exports.default = DevfolioHackathonsCount;
