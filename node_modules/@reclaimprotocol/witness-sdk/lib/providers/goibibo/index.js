"use strict";
/**
 * Goibibo provider
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../config");
const http_parser_1 = require("../../utils/http-parser");
const http_provider_1 = __importDefault(require("../http-provider"));
const HOST = 'www.goibibo.com';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
const METHOD = 'GET';
const goibibo = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return typeof params.goTribeDetails === 'string';
    },
    createRequest(secretParams) {
        return http_provider_1.default.createRequest({
            cookieStr: `bm_sz=${secretParams.bm_sz};`,
        }, {
            url: 'https://www.goibibo.com/tripsbackend//v2/bookingsummary',
            method: METHOD,
            headers: {
                'Auth': secretParams.Auth,
            },
            responseSelections: []
        });
    },
    assertValidProviderReceipt(receipt) {
        var _a;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== METHOD.toLowerCase()) {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith('/tripsbackend//v2/bookingsummary')) {
            throw new Error(`Invalid URL: ${req.url}`);
        }
        // we ensure the connection header was sent as "close"
        // this is done to avoid any possible malicious request
        // that contains multiple requests, but via redactions
        // is spoofed as a single request
        if (req.headers['connection'] !== 'close') {
            throw new Error('Invalid connection header');
        }
        // now we parse the HTTP response
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (res.statusCode !== 200) {
            throw new Error(`Invalid status code: ${res.statusCode}`);
        }
        if (!((_a = res.headers['content-type']) === null || _a === void 0 ? void 0 : _a.startsWith('application/json'))) {
            throw new Error(`Invalid content-type: ${res.headers['content-type']}`);
        }
        // const data = Buffer.from(res.body).toString('utf8')
        // Create a TextDecoder
        const textDecoder = new TextDecoder('utf-8'); // Assuming UTF-8 encoding
        // Convert Uint8Array to string
        const data = textDecoder.decode(res.body);
        if (!data) {
            throw new Error(`Invalid data: ${data}`);
        }
    },
};
exports.default = goibibo;
