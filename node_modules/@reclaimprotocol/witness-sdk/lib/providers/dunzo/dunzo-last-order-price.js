"use strict";
/**
 * Verify latest dunzo order at the period of the order
 * https://www.dunzo.com/api/v0/tasks/?type=&page=1
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../config");
const utils_1 = require("../../utils");
const http_parser_1 = require("../../utils/http-parser");
const utils_2 = __importStar(require("./utils"));
// where to send the HTTP request
const HOST = 'www.dunzo.com';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
// what API to call
const METHOD = 'GET';
const URL = '/api/v0/tasks/?type=&page=1';
const dunzoLastOrder = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return typeof (params === null || params === void 0 ? void 0 : params.value) === 'number';
    },
    createRequest({ cookieStr }) {
        // serialise the HTTP request
        const url = URL;
        const data = [
            `${METHOD} ${url} HTTP/1.1`,
            'Host: ' + HOST,
            `cookie: ${cookieStr};`,
            'accept: application/json, text/plain, */*',
            'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
            'Content-Length: 0',
            'Connection: close',
            '\r\n'
        ].join('\r\n');
        // find the token and redact it
        const tokenStartIndex = data.indexOf(cookieStr);
        return {
            data,
            // anything that should be redacted from the transcript
            // should be added to this array
            redactions: [
                {
                    fromIndex: tokenStartIndex,
                    toIndex: tokenStartIndex + cookieStr.length
                }
            ]
        };
    },
    assertValidProviderReceipt(receipt, { value }) {
        var _a, _b;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== METHOD.toLowerCase()) {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith(URL)) {
            throw new Error(`Invalid URL: ${req.url}`);
        }
        // we ensure the connection header was sent as "close"
        // this is done to avoid any possible malicious request
        // that contains multiple requests, but via redactions
        // is spoofed as a single request
        if (req.headers['connection'] !== 'close') {
            throw new Error('Invalid connection header');
        }
        // now we parse the HTTP response
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (res.statusCode !== 200) {
            throw new Error(`Invalid status code: ${res.statusCode}`);
        }
        if (!((_a = res.headers['content-type']) === null || _a === void 0 ? void 0 : _a.startsWith('application/json'))) {
            throw new Error(`Invalid content-type: ${res.headers['content-type']}`);
        }
        const json = JSON.parse((0, utils_1.uint8ArrayToStr)(res.body));
        let totalValue;
        const k = 1;
        try {
            const orderValues = (0, utils_2.default)((_b = json.data) === null || _b === void 0 ? void 0 : _b.tasks, utils_2.deliveredCondition, k);
            if (orderValues.length !== k) {
                throw new Error('number of orders required don\'t match');
            }
            totalValue = orderValues.reduce((sum, val) => sum + val, 0);
        }
        catch (err) {
            throw err;
        }
        if (totalValue !== value) {
            throw new Error('Invalid purchase value');
        }
    },
};
exports.default = dunzoLastOrder;
