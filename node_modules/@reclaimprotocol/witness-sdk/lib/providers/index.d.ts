export declare const providers: {
    'google-login': import("..").Provider<{
        emailAddress: string;
    }, {
        token: string;
    }>;
    'yc-login': import("..").Provider<{
        userId: number;
    }, {
        cookieStr: string;
    }>;
    'outlook-login': import("..").Provider<{
        emailAddress: string;
    }, {
        token: string;
    }>;
    'codeforces-rating': import("..").Provider<{
        rating: number;
    }, {
        cookieStr: string;
    }>;
    'dunzo-last-order': import("..").Provider<{
        value: number;
    }, {
        cookieStr: string;
    }>;
    'tinder-match-count': import("..").Provider<{
        userId: string;
        matchCount: number;
    }, {
        token: string;
    }>;
    http: import("..").Provider<import("./http-provider").HTTPProviderParams, import("./http-provider").HTTPProviderSecretParams>;
    'github-commits': import("..").Provider<{
        type: "github-commits";
        repository: string;
        searchQuery: import("./github-claim/utils").SearchQueryObject;
    }, {
        token: string;
    }>;
    'github-issues': import("..").Provider<{
        type: "github-issues";
        repository: string;
        searchQuery: import("./github-claim/utils").SearchQueryObject;
    }, {
        token: string;
    }>;
    'github-pull-requests': import("..").Provider<{
        type: "github-pull-requests";
        repository: string;
        searchQuery: import("./github-claim/utils").SearchQueryObject;
    }, {
        token: string;
    }>;
    'mastodon-user': import("..").Provider<{
        username: string;
    }, {
        cookieStr: string;
    }>;
    'spotify-premium': import("..").Provider<{}, {
        token: string;
    }>;
    'spotify-account-type': import("..").Provider<{
        accountType: string;
    }, {
        token: string;
    }>;
    'spotify-username': import("..").Provider<{
        userName: string;
    }, {
        token: string;
    }>;
    'spotify-email': import("..").Provider<{
        userEmail: string;
    }, {
        token: string;
    }>;
    'tumblr-follower': import("..").Provider<{
        followingAccount: string;
    }, {
        cookie: string;
    }>;
    'swiggy-total-count': import("..").Provider<{
        orderCount: number;
    }, {
        cookieStr: string;
    }>;
    'wikipedia-user': import("..").Provider<{
        userName: string;
    }, {
        cookieStr: string;
    }>;
    'facebook-friends-count': import("..").Provider<{
        userURL: string;
        friendsCount: number;
    }, {
        cookie: string;
    }>;
    'binance-asset-balance': import("..").Provider<{
        assetName: string;
        assetQty: number;
    }, {
        p20tToken: string;
        csrfToken: string;
    }>;
    'ebay-user': import("..").Provider<{
        userName: string;
    }, {
        cookieStr: string;
    }>;
    'flickr-user': import("..").Provider<{
        userEmail: string;
    }, {
        cookie: string;
    }>;
    'instagram-user': import("..").Provider<{
        userName: string;
    }, {
        cookie: string;
    }>;
    'instagram-user-week-posts': import("..").Provider<{
        igCDNFileNames: string[];
    }, {
        cookieStr: string;
        csrfToken: string;
        username: string;
    }>;
    'blind-user': import("..").Provider<{
        userName: string;
    }, {
        cookie: string;
    }>;
    'chess-user': import("..").Provider<{
        userName: string;
    }, {
        cookie: string;
    }>;
    'bybit-balance': import("..").Provider<{
        balance: number;
    }, {
        userToken: string;
    }>;
    'groww-stock-balance': import("..").Provider<{
        stockIsin: string;
        stockQty: number;
    }, {
        authToken: string;
    }>;
    'devfolio-hackathon-count': import("..").Provider<{
        username: string;
        hackathonCount: number;
    }, {
        cookieStr: string;
    }>;
    'quora-user': import("..").Provider<{
        userId: string;
    }, {
        cookieStr: string;
    }>;
    'notion-username': import("..").Provider<{
        userName: string;
    }, {
        token: string;
    }>;
    'medium-followers-count': import("..").Provider<{
        username: string;
        followersCount: number;
    }, {
        cookie: string;
    }>;
    'lichess-username': import("..").Provider<{
        username: string;
    }, {
        cookieStr: string;
    }>;
    'proton-mail': import("..").Provider<{
        email: string;
    }, {
        auth: string;
        xPmUid: string;
    }>;
    'soundcloud-username': import("..").Provider<{
        username: string;
    }, {
        cookie: string;
    }>;
    'letterboxd-user': import("..").Provider<{
        userName: string;
    }, {
        cookieStr: string;
    }>;
    'coinswitch-balance': import("..").Provider<{
        balance: number;
    }, {
        cookieStr: string;
    }>;
    'zomato-order-count': import("..").Provider<{
        orderCount: number;
        userId: string;
    }, {
        cookieStr: string;
    }>;
    'loom-user-id': import("..").Provider<{
        userId: string;
    }, {
        cookieStr: string;
    }>;
    'chess-rating': import("..").Provider<{
        rating: string;
        userName: string;
    }, {
        cookie: string;
    }>;
    'coindcx-balance': import("..").Provider<{
        assetName: string;
        balance: number;
    }, {
        AuthToken: string;
    }>;
    'hackerearth-user': import("..").Provider<{
        username: string;
    }, {
        cookie: string;
    }>;
    'hackerrank-username': import("..").Provider<{
        userName: string;
    }, {
        token: string;
    }>;
    'uidai-aadhar': import("..").Provider<{
        name: string;
    }, {
        uid: string;
        token: string;
    }>;
    'godaddy-login': import("..").Provider<{
        emailAddress: string;
        region: string;
    }, {
        cookieStr: string;
        encQueryParams: string;
    }>;
    'uidai-phone': import("..").Provider<{
        mobile: string;
    }, {
        uid: string;
        token: string;
    }>;
    'uidai-state': import("..").Provider<{
        stateName: string;
    }, {
        uid: string;
        token: string;
    }>;
    'uidai-uid': import("..").Provider<{
        uid: string;
    }, {
        uid: string;
        token: string;
    }>;
    'uidai-dob': import("..").Provider<{
        dob: string;
    }, {
        uid: string;
        token: string;
    }>;
    'uidai-address': import("..").Provider<{
        address: string;
    }, {
        uid: string;
        token: string;
    }>;
    'twitter-followers-count': import("..").Provider<{
        numFollowers: string;
    }, {
        cookieStr: string;
    }>;
    'twitter-username': import("..").Provider<{
        username: string;
    }, {
        cookieStr: string;
    }>;
    'irs-name': import("..").Provider<{
        name: string;
    }, {
        token: string;
    }>;
    'irs-address': import("..").Provider<{
        address: string;
    }, {
        token: string;
    }>;
    'bybit-spot-pnl': import("..").Provider<{
        profitPercentage: number;
    }, {
        userToken: string;
    }>;
    'zoho-email': import("..").Provider<{
        email: string;
    }, {
        token: string;
    }>;
    'venmo-id': import("..").Provider<{
        userId: string;
    }, {
        cookieStr: string;
    }>;
    'venmo-transaction': import("..").Provider<{
        userId: string;
        recipientId: string;
        amount: string;
    }, {
        cookieStr: string;
        userId: string;
    }>;
    goibibo: import("..").Provider<{
        goTribeDetails: string;
    }, {
        bm_sz: string;
        Auth: string;
    }>;
    'swiggy-equal': import("..").Provider<{
        userData: string;
    }, {
        cookieStr: string;
    }>;
    'one-mg': import("..").Provider<{
        data: unknown[];
        queryString: Record<string, string>;
    }, {
        session: string;
    }>;
};
export type ProviderName = keyof typeof providers;
type Provider<E extends ProviderName> = (typeof providers)[E];
export type ProviderParams<E extends ProviderName> = Parameters<Provider<E>['assertValidProviderReceipt']>[1];
export type ProviderSecretParams<E extends ProviderName> = Parameters<Provider<E>['createRequest']>[0];
export {};
