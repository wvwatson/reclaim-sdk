"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Verify the address from aadhar card
 */
const config_1 = require("../../config");
const utils_1 = require("../../utils");
const http_parser_1 = require("../../utils/http-parser");
// where to send the HTTP request
const HOST = 'tathya.uidai.gov.in';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
const PATH = '/ssupService/api/demographics/request/v4/profile';
const UidaiAadhaarAddress = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return typeof params.address === 'string';
    },
    createRequest({ uid, token }) {
        // this is a simple http request construction.
        // see https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages
        const payload = JSON.stringify({ uidNumber: uid });
        const data = [
            `POST ${PATH} HTTP/1.1`,
            `Host: ${HOST}`,
            'Accept: application/json, text/plain',
            'Accept-Language: en_IN',
            `Authorization: ${token}`,
            'Connection: close',
            'Content-Type: application/json',
            `Content-Length: ${payload.length}`,
            'appID: SSUP',
            'Accept-Encoding: gzip, deflate, br',
            `\r\n\{"uidNumber":"${uid}"}`,
        ].join('\r\n');
        // find the Token string and redact it
        const tokenStartIndex = data.indexOf(`${token}`);
        return {
            data,
            // anything that should be redacted from the transcript
            // should be added to this array
            redactions: [
                {
                    fromIndex: tokenStartIndex,
                    toIndex: tokenStartIndex + `${token}`.length,
                },
            ],
        };
    },
    assertValidProviderReceipt(receipt, { address }) {
        var _a, _b, _c, _d, _e, _f;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== 'post') {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith(PATH)) {
            throw new Error(`Invalid path: ${req.url}`);
        }
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (res.statusCode === 303) {
            throw new Error(`Invalid Login: ${res.statusCode} received. Try checking token. It might be stale.`);
        }
        let html;
        if (res.headers['content-encoding'] === 'gzip') {
            const buf = Buffer.from(res.body);
            html = (0, utils_1.gunzipSync)(buf).toString();
        }
        else {
            html = res.body.toString();
        }
        if (req.headers['connection'] !== 'close') {
            throw new Error('Invalid connection header');
        }
        const json = JSON.parse(html);
        if (!('responseData' in json)) {
            throw new Error('Invalid response returned from server!');
        }
        let parsedAddress = '';
        if ((_a = json.responseData) === null || _a === void 0 ? void 0 : _a.building) {
            parsedAddress = parsedAddress + ' ' + json.responseData.building;
        }
        if ((_b = json.responseData) === null || _b === void 0 ? void 0 : _b.street) {
            parsedAddress = parsedAddress + ' ' + json.responseData.street;
        }
        if ((_c = json.responseData) === null || _c === void 0 ? void 0 : _c.locality) {
            parsedAddress = parsedAddress + ' ' + json.responseData.locality;
        }
        if ((_d = json.responseData) === null || _d === void 0 ? void 0 : _d.landmark) {
            parsedAddress = parsedAddress + ' ' + json.responseData.landmark;
        }
        if ((_e = json.responseData) === null || _e === void 0 ? void 0 : _e.vtcName) {
            parsedAddress = parsedAddress + ' ' + json.responseData.vtcName;
        }
        if ((_f = json.responseData) === null || _f === void 0 ? void 0 : _f.pincode) {
            parsedAddress = parsedAddress + ' ' + json.responseData.pincode.toString();
        }
        if (!parsedAddress) {
            throw new Error('No Address was found in the response data!');
        }
        if (parsedAddress !== address) {
            throw new Error(`Invalid Address: Address doesn't match from fetched Address ${parsedAddress}`);
        }
    },
};
exports.default = UidaiAadhaarAddress;
