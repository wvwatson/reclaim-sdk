"use strict";
// Venmo provider to prove that you own a certain venmo account
// This works by sending a request to account.venmo.com/_next/data/X4CQ5-Nj20dBzlA63J4Ee/en/settings/profile.json and extracting the details
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../config");
const utils_1 = require("../../utils");
const http_parser_1 = require("../../utils/http-parser");
// where to send the HTTP request
const HOST = 'account.venmo.com';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
// what API to call
const METHOD = 'GET';
const PATH = '/_next/data/X4CQ5-Nj20dBzlA63J4Ee/en/settings/profile.json';
const venmoUser = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return (typeof params.userId === 'string');
    },
    createRequest({ cookieStr }) {
        // this is a simple http request construction.
        // see https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages
        const data = [
            `${METHOD} ${PATH} HTTP/1.1`,
            'Host: ' + HOST,
            'accept: */*',
            'accept-language: en-GB,en-US;q=0.9,en;q=0.8',
            `cookie: ${cookieStr};`,
            'Connection: close',
            '\r\n'
        ].join('\r\n');
        // find the cookie string and redact it
        const cookieStartIndex = data.indexOf(cookieStr);
        return {
            data,
            // anything that should be redacted from the transcript
            // should be added to this array
            redactions: [
                {
                    fromIndex: cookieStartIndex,
                    toIndex: cookieStartIndex + cookieStr.length
                }
            ]
        };
    },
    assertValidProviderReceipt(receipt, { userId }) {
        var _a, _b, _c;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== METHOD.toLowerCase()) {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith(PATH)) {
            throw new Error(`Invalid path: ${req.url}`);
        }
        // we ensure the connection header was sent as "close"
        // this is done to avoid any possible malicious request
        // that contains multiple requests, but via redactions
        // is spoofed as a single request
        if (req.headers['connection'] !== 'close') {
            throw new Error('Invalid connection header');
        }
        if (!req.url.startsWith(PATH)) {
            throw new Error(`Invalid path: ${req.url}`);
        }
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (res.statusCode !== 200) {
            throw new Error(`Invalid status code: ${res.statusCode}`);
        }
        if (!((_a = res.headers['content-type']) === null || _a === void 0 ? void 0 : _a.startsWith('application/json'))) {
            throw new Error(`Invalid content-type: ${res.headers['content-type']}`);
        }
        try {
            const resBody = JSON.parse((0, utils_1.uint8ArrayToStr)(res.body));
            if (((_b = resBody === null || resBody === void 0 ? void 0 : resBody.pageProps) === null || _b === void 0 ? void 0 : _b.id) !== userId) {
                throw new Error(`UserId "${(_c = resBody === null || resBody === void 0 ? void 0 : resBody.pageProps) === null || _c === void 0 ? void 0 : _c.id}" does not match expected "${userId}"`);
            }
        }
        catch (error) {
            throw new Error(error);
        }
    },
};
exports.default = venmoUser;
