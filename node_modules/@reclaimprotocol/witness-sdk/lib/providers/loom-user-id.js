"use strict";
// Loom provider to prove that you own a certain loom account
// This works by sending a request to loom.com/profile,
// which will redirect you to loom.com/profile/{{userId}}
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config");
const http_parser_1 = require("../utils/http-parser");
// where to send the HTTP request
const HOST = 'www.loom.com';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
const PATH = '/profile/';
const loomUser = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return (typeof params.userId === 'string');
    },
    createRequest({ cookieStr }) {
        // this is a simple http request construction.
        // see https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages
        const data = [
            `GET ${PATH} HTTP/1.1`,
            'Host: ' + HOST,
            'Connection: keep-alive',
            `cookie: ${cookieStr}`,
            'User-Agent: reclaim/1.0.0',
            'Accept-Encoding: gzip, deflate',
            '\r\n'
        ].join('\r\n');
        // find the cookie string and redact it
        const cookieStartIndex = data.indexOf(cookieStr);
        return {
            data,
            // anything that should be redacted from the transcript
            // should be added to this array
            redactions: [
                {
                    fromIndex: cookieStartIndex,
                    toIndex: cookieStartIndex + cookieStr.length
                }
            ]
        };
    },
    assertValidProviderReceipt(receipt, { userId }) {
        var _a;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== 'get') {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith(PATH)) {
            throw new Error(`Invalid path: ${req.url}`);
        }
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (!((_a = res.headers['content-type']) === null || _a === void 0 ? void 0 : _a.startsWith('text/'))) {
            throw new Error(`Invalid content-type: ${res.headers['content-type']}`);
        }
        // www.loom.com/profile will redirect to loom.com/profile/{{userid}}
        // check for status code to be 302: redirection
        if (res.statusCode !== 302) {
            throw new Error(`Invalid status code: ${res.statusCode}. Expected 302`);
        }
        // check if userid is the same as that /profile will redirect to
        if (res.headers['location'] !== `${PATH}${userId}`) {
            throw new Error(`Invalid profile redirect ${PATH}${userId}. Found ${res.headers['location']}`);
        }
    },
};
exports.default = loomUser;
