"use strict";
// The lichess provider aims to prove that you own a lichess username
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../config");
const utils_1 = require("../../utils");
const http_parser_1 = require("../../utils/http-parser");
// where to send the HTTP request
const HOST = 'lichess.org';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
const PATH = '/inbox';
const lichessUsername = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return (typeof params.username === 'string');
    },
    createRequest({ cookieStr }) {
        // this is a simple http request construction.
        // see https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages
        const data = [
            `GET ${PATH} HTTP/1.1`,
            'Host: ' + HOST,
            // "connection: close" ensures the server terminates
            // the connection after the first HTTP request is done.
            // We add this header to prevent the user from creating
            // multiple http requests in the same session
            'Connection: close',
            `cookie: ${cookieStr}`,
            'User-Agent: reclaim/1.0.0',
            'Accept-Encoding: gzip, deflate',
            '\r\n'
        ].join('\r\n');
        // find the cookie string and redact it
        const cookieStartIndex = data.indexOf(cookieStr);
        return {
            data,
            // anything that should be redacted from the transcript
            // should be added to this array
            redactions: [
                {
                    fromIndex: cookieStartIndex,
                    toIndex: cookieStartIndex + cookieStr.length
                }
            ]
        };
    },
    assertValidProviderReceipt(receipt, { username }) {
        var _a, _b, _c, _d;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== 'get') {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith(PATH)) {
            throw new Error(`Invalid path: ${req.url}`);
        }
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (res.statusCode === 303) {
            throw new Error(`Invalid Login: ${res.statusCode} received. Try checking cookies.`);
        }
        if (!((_a = res.headers['content-type']) === null || _a === void 0 ? void 0 : _a.startsWith('text/html'))) {
            throw new Error(`Invalid content-type: ${res.headers['content-type']}`);
        }
        let html;
        if (res.headers['content-encoding'] === 'gzip') {
            const buf = Buffer.from(res.body);
            html = (0, utils_1.gunzipSync)(buf).toString();
        }
        else {
            html = res.body.toString();
        }
        const userRegexp = /lichess.load.then\(\(\)\=\>\{lichess.loadEsm\('msg',\{init:\{"data":{"me":{"name":"\w*","id":"\w*"/g;
        const matches = html.match(userRegexp);
        const infoStringList = (_c = (_b = matches === null || matches === void 0 ? void 0 : matches[0].split('{')) === null || _b === void 0 ? void 0 : _b.at(-1)) === null || _c === void 0 ? void 0 : _c.split(',');
        const nameString = (_d = infoStringList === null || infoStringList === void 0 ? void 0 : infoStringList[0].split(':')) === null || _d === void 0 ? void 0 : _d[1].replace(/"/g, '');
        if (nameString !== username) {
            throw new Error(`Invalid Username: ${username} doesn't match fetched name ${nameString}`);
        }
    },
};
exports.default = lichessUsername;
