"use strict";
// The zomato order count provider aims to prove the number of times you have ordered on zomato.
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../config");
const utils_1 = require("../../utils");
const http_parser_1 = require("../../utils/http-parser");
// where to send the HTTP request
const HOST = 'www.zomato.com';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
const zomatoOrders = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return (typeof params.orderCount === 'number'
            && typeof params.userId === 'string');
    },
    createRequest({ cookieStr }, params) {
        const data = [
            `GET /users/${params.userId}/ordering HTTP/1.1`,
            'Host: ' + HOST,
            'Connection: closed',
            `cookie: ${cookieStr}`,
            'User-Agent: reclaim/1.0.0',
            'Accept-Encoding: gzip, deflate',
            '\r\n'
        ].join('\r\n');
        // find the cookie string and redact it
        const cookieStartIndex = data.indexOf(cookieStr);
        return {
            data,
            redactions: [
                {
                    fromIndex: cookieStartIndex,
                    toIndex: cookieStartIndex + cookieStr.length
                }
            ]
        };
    },
    assertValidProviderReceipt(receipt, params) {
        var _a, _b, _c;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== 'get') {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.includes('ordering')) {
            throw new Error(`Invalid path: ${req.url}`);
        }
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (!((_a = res.headers['content-type']) === null || _a === void 0 ? void 0 : _a.startsWith('text/html'))) {
            throw new Error(`Invalid content-type: ${res.headers['content-type']}`);
        }
        if (res.statusCode !== 200) {
            throw new Error(`Invalid status code received: ${res.statusCode}. Expected 200`);
        }
        let html;
        if (res.headers['content-encoding'] === 'gzip') {
            const buf = Buffer.from(res.body);
            html = (0, utils_1.gunzipSync)(buf).toString();
        }
        else {
            html = res.body.toString();
        }
        const userRegexp = /Order History<\/h1>.*Showing \d+-\d+ of \d+ orders<\/div>/g;
        const matches = html.match(userRegexp);
        const orderstring = (_c = (_b = matches === null || matches === void 0 ? void 0 : matches[0].match(/Showing.*orders/g)) === null || _b === void 0 ? void 0 : _b[0].split(' ')) === null || _c === void 0 ? void 0 : _c.at(-2);
        if (orderstring === undefined) {
            throw new Error(`Invalid order count received, expected ${params.orderCount}`);
        }
        const ordernum = parseInt(orderstring, 10);
        if (isNaN(ordernum)) {
            throw new Error(`Could not fetch number of orders, expected ${params.orderCount}`);
        }
        if (ordernum !== params.orderCount) {
            throw new Error(`Invalid order count: ${orderstring} expected, ${params.orderCount} received`);
        }
    },
};
exports.default = zomatoOrders;
