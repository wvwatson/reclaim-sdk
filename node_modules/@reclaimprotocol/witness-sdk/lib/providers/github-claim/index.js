"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../config");
const utils_1 = require("../../utils");
const http_parser_1 = require("../../utils/http-parser");
const utils_2 = require("./utils");
const HOST = 'api.github.com';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
const METHOD = 'GET';
const URL = '/search';
const makeGithubProvider = () => ({
    hostPort: HOSTPORT,
    areValidParams(params) {
        const { type, repository, searchQuery } = params;
        return (utils_2.CLAIM_TYPE.includes(type) &&
            typeof repository === 'string' &&
            repository.split('/').length === 2 &&
            (0, utils_2.isObject)(searchQuery));
    },
    createRequest({ token }, { type, searchQuery, repository }) {
        const endpoint = (0, utils_2.getGithubEndpoint)(type);
        const qs = (0, utils_2.buildQueryString)(searchQuery, type, utils_2.DEFAULT_QUERY_STRING, repository);
        const PATH = `${URL}/${endpoint}${qs}`;
        const data = [
            `${METHOD} ${PATH} HTTP/1.1`,
            'Host: ' + HOST,
            'Connection: close',
            'Content-Length: 0',
            'X-GitHub-Api-Version: 2022-11-28',
            'Accept: application/vnd.github+json',
            `Authorization: Bearer ${token}`,
            `User-Agent: ${config_1.RECLAIM_USER_AGENT}`,
            '\r\n',
        ].join('\r\n');
        // find the token and redact it
        const tokenStartIndex = data.indexOf(token);
        return {
            data,
            // anything that should be redacted from the transcript
            // should be added to this array
            redactions: [
                {
                    fromIndex: tokenStartIndex,
                    toIndex: tokenStartIndex + token.length,
                },
            ],
        };
    },
    assertValidProviderReceipt(receipt) {
        var _a, _b;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== METHOD.toLowerCase()) {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith(URL)) {
            throw new Error(`Invalid URL: ${req.url}`);
        }
        // we ensure the connection header was sent as "close"
        // this is done to avoid any possible malicious request
        // that contains multiple requests, but via redactions
        // is spoofed as a single request
        if (req.headers['connection'] !== 'close') {
            throw new Error('Invalid connection header');
        }
        // now we parse the HTTP response & check
        // if the emailAddress returned by the API
        // matches the parameters the user provided
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (!((_a = res.headers['content-type']) === null || _a === void 0 ? void 0 : _a.startsWith('application/json'))) {
            throw new Error(`Invalid content-type: ${res.headers['content-type']}`);
        }
        const responseBody = JSON.parse((0, utils_1.uint8ArrayToStr)(res.body));
        if (res.statusCode !== 200) {
            if ((0, utils_2.isGithubError)(responseBody)) {
                const errorStr = ((_b = responseBody === null || responseBody === void 0 ? void 0 : responseBody.errors) === null || _b === void 0 ? void 0 : _b.length)
                    ? responseBody.errors[0].message
                    : responseBody.message;
                throw new Error(errorStr);
            }
        }
        if (!(0, utils_2.isValidResponse)(responseBody)) {
            throw new Error(`Invalid Receipt: ${res.statusCode}`);
        }
    },
});
exports.default = makeGithubProvider;
