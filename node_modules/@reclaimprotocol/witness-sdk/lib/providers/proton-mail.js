"use strict";
/**
 * Prove whether a user has a proton mail account
 */
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config");
const utils_1 = require("../utils");
const http_parser_1 = require("../utils/http-parser");
const HOST = 'mail.proton.me';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
const METHOD = 'GET';
const URL = '/api/core/v4/users';
const ProtonMail = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return (typeof params.email === 'string' &&
            params.email !== '');
    },
    createRequest(secretParams) {
        const url = URL;
        const data = [
            `${METHOD} ${url} HTTP/1.1`,
            'Host: ' + HOST,
            'accept: */*',
            'user-agent: reclaim/1.0.0',
            'Connection: close',
            `x-pm-uid: ${secretParams.xPmUid}`,
            `cookie: ${secretParams.auth}`,
            'x-pm-appversion: web-mail@1000.0.23.1',
            '\r\n'
        ].join('\r\n');
        // Find the cookie and redact it
        const AuthStartIndex = data.indexOf(secretParams.auth);
        const xPmUidStartIndex = data.indexOf(secretParams.xPmUid);
        return {
            data,
            redactions: [
                { fromIndex: xPmUidStartIndex, toIndex: xPmUidStartIndex + secretParams.xPmUid.length },
                { fromIndex: AuthStartIndex, toIndex: AuthStartIndex + secretParams.auth.length },
            ],
        };
    },
    assertValidProviderReceipt(receipt, { email }) {
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== 'get') {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith('/api/core/v4/users')) {
            throw new Error(`Invalid URL: ${req.url}`);
        }
        if (req.headers['connection'] !== 'close') {
            throw new Error('Invalid connection header');
        }
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (res.statusCode !== 200) {
            throw new Error(`Invalid status code: ${res.statusCode}`);
        }
        let html;
        if (res.headers['content-encoding'] === 'gzip') {
            const buf = Buffer.from(res.body);
            html = (0, utils_1.gunzipSync)(buf).toString();
        }
        else {
            html = res.body.toString();
        }
        const data = JSON.parse(html);
        const resEmail = data.User.Email;
        if (resEmail !== email) {
            throw new Error('Email does not match');
        }
    },
};
exports.default = ProtonMail;
