"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Verify the Email Address from ZOHO Profile API Endpoint
 *
 * https://accounts.zoho.in/webclient/v1/account/self/user/self
 */
const config_1 = require("../config");
const utils_1 = require("../utils");
const http_parser_1 = require("../utils/http-parser");
// where to send the HTTP request
const HOST = 'accounts.zoho.in';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
// what API to call
const METHOD = 'GET';
const PATH = '/webclient/v1/account/self/user/self';
const zohoEmail = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return typeof params.email === 'string';
    },
    createRequest({ token }) {
        // this is a simple http request construction.
        // see https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages
        const data = [
            `${METHOD} ${PATH} HTTP/1.1`,
            `Host: ${HOST}`,
            'accept: application/json, */*',
            'Connection: close',
            'Cookie: ' + token,
            'User-Agent: reclaim/1.0.0',
            '\r\n',
        ].join('\r\n');
        // find the Token string and redact it
        const tokenStartIndex = data.indexOf(`${token}`);
        return {
            data,
            // anything that should be redacted from the transcript
            // should be added to this array
            redactions: [
                {
                    fromIndex: tokenStartIndex,
                    toIndex: tokenStartIndex + `${token}`.length,
                },
            ],
        };
    },
    assertValidProviderReceipt(receipt, { email }) {
        var _a, _b, _c, _d;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== METHOD.toLowerCase()) {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith(PATH)) {
            throw new Error(`Invalid path: ${req.url}`);
        }
        // we ensure the connection header was sent as "close"
        // this is done to avoid any possible malicious request
        // that contains multiple requests, but via redactions
        // is spoofed as a single request
        if (req.headers['connection'] !== 'close') {
            throw new Error('Invalid connection header');
        }
        // now we parse the HTTP response & check
        // if the address returned by the API
        // matches the parameters the user provided
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (res.statusCode !== 200) {
            throw new Error(`Invalid status code: ${res.statusCode}`);
        }
        const resBody = JSON.parse((0, utils_1.uint8ArrayToStr)(res.body));
        if (((_b = (_a = resBody === null || resBody === void 0 ? void 0 : resBody.user) === null || _a === void 0 ? void 0 : _a.User) === null || _b === void 0 ? void 0 : _b.primary_email) !== email) {
            throw new Error(`Invalid email: ${(_d = (_c = resBody === null || resBody === void 0 ? void 0 : resBody.user) === null || _c === void 0 ? void 0 : _c.User) === null || _d === void 0 ? void 0 : _d.primary_email} could not be matched with ${email}`);
        }
    },
};
exports.default = zohoEmail;
