"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Verify the Address from IRS Profile API Endpoint
 *
 * https://sa.www4.irs.gov/ola/rest/taxpayer/accountSummary
 */
const config_1 = require("../../config");
const utils_1 = require("../../utils");
const http_parser_1 = require("../../utils/http-parser");
// where to send the HTTP request
const HOST = 'scrape.smartproxy.com';
const API_URL = 'https://sa.www4.irs.gov/ola/rest/taxpayer/accountSummary';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
// what API to call
const METHOD = 'POST';
const PATH = '/v1/tasks';
const extractCookiesFromStr = (token) => {
    const cookies = token.split(';');
    const cookieDictArr = cookies.map(cookie => {
        const cookieVal = cookie.substring(cookie.indexOf('=') + 1);
        const cookieKey = cookie.split('=')[0];
        return { ['key']: cookieKey, ['value']: cookieVal };
    });
    return cookieDictArr;
};
const irsAddress = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return typeof params.address === 'string';
    },
    createRequest({ token }) {
        // this is a simple http request construction.
        // see https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages
        const payloadHeaders = {
            'Accept': '*/*',
            'accept-language': 'en-GB,en-US;q=0.9,en;q=0.8',
            'sec-fetch-mode': 'cors',
            'Connection': 'close',
            'user-agent': 'reclaim/1.0.0',
        };
        const payloadCookies = extractCookiesFromStr(token);
        const payload = JSON.stringify({
            'target': 'universal',
            'url': API_URL,
            'headers': payloadHeaders,
            'cookies': payloadCookies,
            'http_method': 'get'
        });
        const data = [
            `${METHOD} ${PATH} HTTP/1.1`,
            `Host: ${HOST}`,
            'accept: application/json',
            'Content-Type: application/json',
            'Connection: close',
            'Authorization: Basic VTAwMDAxMTE3ODQ6cHZxZXdjSzl0cFRvM05iNTZa',
            `Content-Length: ${payload.length}`,
            'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
            `\r\n${payload}\}`
        ].join('\r\n');
        // find the Token string and redact it
        const tokenStartIndex = data.indexOf(`${payload}`);
        return {
            data,
            // anything that should be redacted from the transcript
            // should be added to this array
            redactions: [
                {
                    fromIndex: tokenStartIndex,
                    toIndex: tokenStartIndex + `${payload}`.length,
                },
            ],
        };
    },
    assertValidProviderReceipt(receipt, { address }) {
        var _a, _b, _c, _d, _e;
        // ensure the request was sent to the right place
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        // parse the HTTP request & check
        // the method, URL, headers, etc. match what we expect
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== METHOD.toLowerCase()) {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith(PATH)) {
            throw new Error(`Invalid path: ${req.url}`);
        }
        // we ensure the connection header was sent as "close"
        // this is done to avoid any possible malicious request
        // that contains multiple requests, but via redactions
        // is spoofed as a single request
        if (req.headers['connection'] !== 'close') {
            throw new Error('Invalid connection header');
        }
        // now we parse the HTTP response & check
        // if the address returned by the API
        // matches the parameters the user provided
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (res.statusCode !== 200) {
            throw new Error(`Invalid status code: ${res.statusCode}`);
        }
        const resBody = JSON.parse((0, utils_1.uint8ArrayToStr)(res.body));
        const response = resBody.results[0].content;
        try {
            const json = JSON.parse(response);
            if (!json) {
                throw new Error('No response returned from server!');
            }
            if (!('taxPayerSummary' in json)) {
                throw new Error('Invalid response returned from server!');
            }
            let parsedAddress = '';
            if ((_a = json.taxPayerSummary) === null || _a === void 0 ? void 0 : _a.physicalAddressLine1Txt) {
                parsedAddress = parsedAddress + ' ' + json.taxPayerSummary.physicalAddressLine1Txt;
            }
            if ((_b = json.taxPayerSummary) === null || _b === void 0 ? void 0 : _b.physicalAddressCityNm) {
                parsedAddress = parsedAddress + ' ' + json.taxPayerSummary.physicalAddressCityNm;
            }
            if ((_c = json.taxPayerSummary) === null || _c === void 0 ? void 0 : _c.physicalAddressStateCd) {
                parsedAddress = parsedAddress + ' ' + json.taxPayerSummary.physicalAddressStateCd;
            }
            if ((_d = json.taxPayerSummary) === null || _d === void 0 ? void 0 : _d.physicalAddressZipCd) {
                parsedAddress = parsedAddress + ' ' + json.taxPayerSummary.physicalAddressZipCd;
            }
            if ((_e = json.taxPayerSummary) === null || _e === void 0 ? void 0 : _e.physicalAddressZipPlusFourExtensionCd) {
                parsedAddress = parsedAddress + ' ' + json.taxPayerSummary.physicalAddressZipPlusFourExtensionCd;
            }
            if (parsedAddress !== address) {
                throw new Error(`Extracted address "${parsedAddress}" doesn't match with "${address}"`);
            }
        }
        catch (error) {
            throw new Error(error);
        }
    },
};
exports.default = irsAddress;
