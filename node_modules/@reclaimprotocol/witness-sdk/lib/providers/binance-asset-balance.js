"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Proves whether a user has more than the specified balance of a token in their binance account
 */
const config_1 = require("../config");
const utils_1 = require("../utils");
const http_parser_1 = require("../utils/http-parser");
const http_provider_1 = __importDefault(require("./http-provider"));
const HOST = 'www.binance.com';
const HOSTPORT = `${HOST}:${config_1.DEFAULT_PORT}`;
const binanceAssetBalance = {
    hostPort: HOSTPORT,
    areValidParams(params) {
        return (typeof params.assetName === 'string' &&
            params.assetName !== '' &&
            typeof params.assetQty === 'number' &&
            params.assetQty >= 0);
    },
    createRequest(secretParams) {
        return http_provider_1.default.createRequest({
            cookieStr: `p20t=${secretParams.p20tToken};`,
        }, {
            url: 'https://www.binance.com/bapi/asset/v2/private/asset-service/wallet/asset',
            method: 'GET',
            headers: {
                csrftoken: secretParams.csrfToken,
            },
            responseSelections: []
        });
    },
    assertValidProviderReceipt(receipt, params) {
        if (receipt.hostPort !== HOSTPORT) {
            throw new Error(`Invalid hostPort: ${receipt.hostPort}`);
        }
        const req = (0, http_parser_1.getHttpRequestHeadersFromTranscript)(receipt.transcript);
        if (req.method !== 'get') {
            throw new Error(`Invalid method: ${req.method}`);
        }
        if (!req.url.startsWith('/bapi/asset/v2/private/asset-service/wallet/asset')) {
            throw new Error(`Invalid URL: ${req.url}`);
        }
        if (req.headers['connection'] !== 'close') {
            throw new Error('Invalid connection header');
        }
        // Parse the HTTP response
        const res = (0, http_parser_1.getCompleteHttpResponseFromTranscript)(receipt.transcript);
        if (res.statusCode !== 200) {
            throw new Error(`Invalid status code: ${res.statusCode}`);
        }
        let html;
        if (res.headers['content-encoding'] === 'gzip') {
            const buf = Buffer.from(res.body);
            html = (0, utils_1.gunzipSync)(buf).toString();
        }
        else {
            html = res.body.toString();
        }
        const data = JSON.parse(html).data;
        let numAssets = 0;
        for (let i = 0; i < data.length; i++) {
            const asset = data[i];
            if (asset.asset === params.assetName) {
                numAssets++;
                if (parseFloat(asset.amount) < params.assetQty) {
                    throw new Error('Asset Qty less than user specified value');
                }
            }
        }
        if (numAssets === 0) {
            throw new Error('Asset Qty less than user specified value');
        }
    },
};
exports.default = binanceAssetBalance;
