import type { CertificatePublicKey, X509Certificate } from '../types';
import { SUPPORTED_CIPHER_SUITE_MAP, SUPPORTED_SIGNATURE_ALGS_MAP } from './constants';
type VerifySignatureOptions = {
    signature: Uint8Array;
    algorithm: keyof typeof SUPPORTED_SIGNATURE_ALGS_MAP;
    publicKey: CertificatePublicKey;
    cipherSuite: keyof typeof SUPPORTED_CIPHER_SUITE_MAP;
    hellos: Uint8Array[] | Uint8Array;
};
export declare function parseCertificates(data: Uint8Array): {
    certificates: X509Certificate<any>[];
    ctx: number;
};
export declare function parseServerCertificateVerify(data: Uint8Array): {
    algorithm: "ED25519" | "RSA_PSS_RSAE_SHA256" | "ECDSA_SECP256R1_SHA256" | "RSA_PKCS1_SHA512";
    signature: Uint8Array;
};
export declare function verifyCertificateSignature({ signature, algorithm, publicKey, hellos, cipherSuite }: VerifySignatureOptions): Promise<void>;
export declare function verifyCertificateChain(chain: X509Certificate[], host: string, additionalRootCAs?: X509Certificate[]): Promise<void>;
export {};
